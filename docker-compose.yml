services:
  frontend:
    build:
      context: ./devis_front
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    depends_on:
      - backend
      - keycloak

  backend:
    build:
      context: ./devis
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/devis
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - KEYCLOAK_REALM=devis
      - KEYCLOAK_AUTH_URL=http://keycloak:8080
      - KEYCLOAK_CLIENT_ID=devis-frontend
      - KEYCLOAK_CLIENT_SECRET=7wOpurpNwCdfj523cxEHpRhEzpgYqj9R
      - KEYCLOAK_ISSUER_URI=http://keycloak:8080/realms/devis
      - KEYCLOAK_JWK_SET_URI=http://keycloak:8080/realms/devis/protocol/openid-connect/certs
      - GENERATION_BATCH_DELAY=120000
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    platform: linux/amd64
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:21.1.1
    ports:
      - "8081:8080"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=123
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://db:5432/keycloak
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=postgres
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_PROXY=edge
    command: start-dev
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:13
    environment:
      - POSTGRES_DB=devis
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-keycloak-db.sql:/docker-entrypoint-initdb.d/init-keycloak-db.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    restart: always
    ports:
      - 8082:8080

volumes:
  postgres-data:
